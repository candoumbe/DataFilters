variables :
  - name: 'configuration'
    value: 'Release'
  - name: 'Parameters.projects'
    value: '**/*.csproj'
  - name: 'Parameters.projects.tests'
    value: '**/*Tests.csproj'
  - name: 'majorVersion'
    value: '1'
  - name: 'minorVersion'
    value: '0'
  - name: 'patchVersion'
    value: '0'
  - name : 'projectName'
    value: 'DataFilters'
  - name: 'azureArtifactFeed'
    value: 'Filters'
  - name: 'minimumTestsCoverage'
    value: 90
  - name: 'coverletOutputFormat'
    value: 'cobertura%2cjson'
  
pr:
  - master

trigger:
  batch: true
  branches:
    include:
        - master
        - features/*
        - fixes/*
  paths:
    exclude:
        - README.md
        - docs/



pool:
  vmImage: windows-latest
#Your build pipeline references an undefined variable named ‘Parameters.projects’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
#Your build pipeline references a secret variable named ‘github.apiKey’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it secret. See https://go.microsoft.com/fwlink/?linkid=865972

steps:
- task: DotNetCoreCLI@2
  displayName: 'dotnet restore'
  inputs:
    command: restore
    projects: '$(Parameters.projects)'
    feedsToUse: config
    nugetConfigPath: Nuget.config
    verbosityRestore: Normal

- task: DotNetCoreCLI@2
  displayName: 'dotnet build'
  inputs:
    projects: '$(Parameters.projects)'
    arguments: '--no-restore -c $(configuration)'

- task: DotNetCoreCLI@2
  displayName: 'Run tests and collect code coverage for DataFilters'
  inputs:
    command: test
    projects: '$(Parameters.projects.tests)'
    arguments: >-
      --no-build -c $(configuration)
      /p:CoverletOutput=$(Agent.TempDirectory)\ /p:CollectCoverage=true
      /p:ExcludeByAttribute=Obsolete
      /p:MergeWith="$(Agent.TempDirectory)\coverage.json"
      /p:CoverletOutputFormat=cobertura

- task: DotNetCoreCLI@2
  inputs:
    command: custom
    custom: tool
    arguments: install -g dotnet-reportgenerator-globaltool --ignore-failed-sources
  displayName: Install ReportGenerator tool
  
- script: reportgenerator -reports:$(Agent.TempDirectory)\**\*.cobertura.xml -targetdir:$(Build.SourcesDirectory)\coverlet\reports -reporttypes:"Badges;Cobertura"
  displayName: Create reports
  
- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: $(Build.SourcesDirectory)\coverlet\reports\Cobertura.xml  